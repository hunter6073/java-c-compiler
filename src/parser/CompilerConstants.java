/* Generated By:JJTree&JavaCC: Do not edit this line. CompilerConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
@SuppressWarnings("all")
public interface CompilerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INCLUDE = 7;
  /** RegularExpression Id. */
  int MAIN = 8;
  /** RegularExpression Id. */
  int VOID = 9;
  /** RegularExpression Id. */
  int STATIC = 10;
  /** RegularExpression Id. */
  int CONST = 11;
  /** RegularExpression Id. */
  int IF = 12;
  /** RegularExpression Id. */
  int ELSEIF = 13;
  /** RegularExpression Id. */
  int ELSE = 14;
  /** RegularExpression Id. */
  int WHILE = 15;
  /** RegularExpression Id. */
  int DO = 16;
  /** RegularExpression Id. */
  int FOR = 17;
  /** RegularExpression Id. */
  int BREAK = 18;
  /** RegularExpression Id. */
  int CASE = 19;
  /** RegularExpression Id. */
  int CONTINUE = 20;
  /** RegularExpression Id. */
  int SWITCH = 21;
  /** RegularExpression Id. */
  int DEFAULT1 = 22;
  /** RegularExpression Id. */
  int FLOAT = 23;
  /** RegularExpression Id. */
  int LONG = 24;
  /** RegularExpression Id. */
  int SHORT = 25;
  /** RegularExpression Id. */
  int INT = 26;
  /** RegularExpression Id. */
  int CHAR = 27;
  /** RegularExpression Id. */
  int DOUBLE = 28;
  /** RegularExpression Id. */
  int TYPEDEF = 29;
  /** RegularExpression Id. */
  int RETURN = 30;
  /** RegularExpression Id. */
  int SIGNED = 31;
  /** RegularExpression Id. */
  int UNSIGNED = 32;
  /** RegularExpression Id. */
  int STRUCT = 33;
  /** RegularExpression Id. */
  int SCANF = 34;
  /** RegularExpression Id. */
  int PRINTF = 35;
  /** RegularExpression Id. */
  int PLUS = 36;
  /** RegularExpression Id. */
  int MINUS = 37;
  /** RegularExpression Id. */
  int MULTIPLY = 38;
  /** RegularExpression Id. */
  int DIVIDE = 39;
  /** RegularExpression Id. */
  int REMAINDER = 40;
  /** RegularExpression Id. */
  int SELFPLUS = 41;
  /** RegularExpression Id. */
  int SELFMINUS = 42;
  /** RegularExpression Id. */
  int ASSIGNMENT = 43;
  /** RegularExpression Id. */
  int EQUAL = 44;
  /** RegularExpression Id. */
  int UNEQUAL = 45;
  /** RegularExpression Id. */
  int GREAT = 46;
  /** RegularExpression Id. */
  int LOWER = 47;
  /** RegularExpression Id. */
  int GREATE = 48;
  /** RegularExpression Id. */
  int LOWERW = 49;
  /** RegularExpression Id. */
  int AND = 50;
  /** RegularExpression Id. */
  int OR = 51;
  /** RegularExpression Id. */
  int NOT = 52;
  /** RegularExpression Id. */
  int LC = 53;
  /** RegularExpression Id. */
  int RC = 54;
  /** RegularExpression Id. */
  int LM = 55;
  /** RegularExpression Id. */
  int RM = 56;
  /** RegularExpression Id. */
  int LB = 57;
  /** RegularExpression Id. */
  int RB = 58;
  /** RegularExpression Id. */
  int DOT = 59;
  /** RegularExpression Id. */
  int SEMICOLON = 60;
  /** RegularExpression Id. */
  int QUOTE = 61;
  /** RegularExpression Id. */
  int COLON = 62;
  /** RegularExpression Id. */
  int IDENTIFIER = 63;
  /** RegularExpression Id. */
  int LETTER = 64;
  /** RegularExpression Id. */
  int CONSTANT = 65;
  /** RegularExpression Id. */
  int DIGIT = 66;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"include\"",
    "\"main\"",
    "\"void\"",
    "\"static\"",
    "\"const\"",
    "\"if\"",
    "\"else if\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"for\"",
    "\"break\"",
    "\"case\"",
    "\"continue\"",
    "\"switch\"",
    "\"default\"",
    "\"float\"",
    "\"long\"",
    "\"short\"",
    "\"int\"",
    "\"char\"",
    "\"double\"",
    "\"typedef\"",
    "\"return\"",
    "\"signed\"",
    "\"unsigned\"",
    "\"struct\"",
    "\"scanf\"",
    "\"printf\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "\"\\\"\"",
    "\":\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<CONSTANT>",
    "<DIGIT>",
  };

}
