/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. new_file.jj */
/*@egen*//**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
  static=false;
}
PARSER_BEGIN(Compiler)
package parser;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator; 
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import javax.swing.JOptionPane;
import java.util.*;

public class Compiler/*@bgen(jjtree)*/implements CompilerTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTCompilerState jjtree = new JJTCompilerState();

/*@egen*/
  
	public static int count=0; //\u9365\u6d98\u5393\u5bee\u5fd4\u7223\u9359\ufffd
	public static int ncount=0; //\u6d93\u5b58\u6902\u9359\u6a40\u567a\u6d93\u5b2b\u7223
	public static int con;
	public static int j=0;
	public static FileOutputStream foutStream ;
	public static PrintStream print_Stream;
	public static ArrayList<MyNode> mylist=new ArrayList<MyNode>();//\u7f01\u64b6\u5063\u95c6\u55d7\u608e
	public static ArrayList<QTInfo> myQTInfo=new ArrayList<QTInfo>(); //\u9365\u6d98\u5393\u5bee\ufffd
	public static QTTable table=new QTTable(myQTInfo);//\u9365\u6d98\u5393\u5bee\u5fdb\u647c\u741b\ue7d2\u7d1d\u9422\u3126\u6f75\u701b\u6a3a\u504d\u7f01\u64b4\u7049
	public static NodeList   myNodeList=new NodeList(mylist);//\u704f\u4f7d\ue5ca\u7f01\u64b6\u5063\u95c6\u55d7\u608e\u951b\u5c7d\ue1ee\u7f01\u64b6\u5063\u6769\u6d9c\ue511\u6fb6\u52ed\u608a
	

//\u9365\u6d98\u5393\u5bee\u5fda\u3003  
    public static void QTInfoTable()
  {
  	try{
  	   FileOutputStream out=new FileOutputStream("Systable.txt");
	   PrintStream QTInfoprint=new PrintStream(out);
	   //temp\u951b\u6c36\u4eb6\u9358\u55d7\u6d13\u934f\u51a8\u7d21\u9352\u6944\u3003\u9a9e\u8235\u58a6\u9357\ufffd
	   for(QTInfo temp:myQTInfo)
	   {
	   	  QTInfoprint.print(temp);	 
	   }
	    QTInfoprint.close();
	   out.close();  	
  	  }
  	  catch(IOException e)
  	  {
  	  	e.printStackTrace();
  	  }
  	  
  }
  

//\u7487\u5d86\u7876\u9352\u55d8\u703d\u951b\u5c83\u7ded\u9351\ufffd\u9357\u66e1\u761d\u9477\ue047\u97e9\u934a\u7877\u7d1d\u9357\u66e1\u761d\u7ec9\u5d85\u57c6>\u6d5c\u5c7d\u5393\u5bee\ufffd
  public static void WordAnalysis()
  {
    	try{
    	SimpleCharStream jj_input_stream=new SimpleCharStream(new FileInputStream(GUI.show.sf));
		CompilerTokenManager tokenManage=new CompilerTokenManager(jj_input_stream);
		FileOutputStream out=new FileOutputStream("WordAnalysis.txt");
		PrintStream wordprint=new PrintStream(out);
		ArrayList<Word> wordlist=new ArrayList<Word>();
		while(true)
		{
			//\u7487\u8bf2\u5f47\u6d93\u5b29\u7af4\u9357\u66e1\u761d
			Token t=tokenManage.getNextToken();
			if(t.kind==0)//\u5a67\u612d\u6783\u6d60\u5241\u7ca8\u93c9\u71c2\u7d1d\u74ba\u51b2\u56ad\u5bf0\ue046\u5e46
			{
				break;
			}
			else
			{//\u704f\u55d7\u5d1f\u7487\u5d84\u4fca\u93ad\ue21a\u769d\u7441\u546d\u6e6aword\u95b2\u5c7d\u74e8\u934c\ufffd
			Word w = new Word();
			w.setKind(t.kind);
			w.setName(t.image);
		    wordlist.add(w);
			}
		}
		//\u95ac\u5d85\u5dfb\u951b\u5c7e\u58a6\u9357\u9881\u7c29\u934f\u51a8\u7d21
		for(Word temp:wordlist)
		{
			wordprint.print(temp);
		}
		wordprint.close();
		out.close();
    	}
    	catch(Exception e)
    	{
    		e.printStackTrace();
    	}	
		
  }
}
PARSER_END(Compiler)



SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
|   <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>//\u9357\u66e1\ue511\u5a09\u3129\u5674
|   <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">//\u6fb6\u6c33\ue511\u5a09\u3129\u5674
}
TOKEN : /* Keywords */
{
	<INCLUDE:"include">
|   <MAIN:"main"> 
|  <VOID:"void">
|  <STATIC:"static">
|  <CONST:"const">
|   <IF:"if">  
|  <ELSEIF:"else if">
|  <ELSE:"else">
|  <WHILE:"while">
|  <DO:"do">
|  <FOR:"for">
|  <BREAK:"break">
|  <CASE:"case">
|  <CONTINUE:"continue">
|  <SWITCH:"switch">
|  <DEFAULT1:"default">
|  <FLOAT:"float">
|  <LONG:"long">
|  <SHORT:"short">
|  <INT:"int">
|  <CHAR:"char">
|  <DOUBLE:"double">
|  <TYPEDEF:"typedef">
|  <RETURN:"return">
|  <SIGNED:"signed">
|  <UNSIGNED:"unsigned">
|  <STRUCT:"struct">
|  <SCANF:"scanf">
|  <PRINTF:"printf">
}



TOKEN : /* Operators */
{
	< PLUS: "+" >
|	< MINUS: "-" >
|	< MULTIPLY: "*" >
|	< DIVIDE: "/" >
|	< REMAINDER:"%" >
|	< SELFPLUS:"++">
|	< SELFMINUS:"--">
|	< ASSIGNMENT:"=" >
|	< EQUAL:"==" >
|	< UNEQUAL:"!=" >
|	< GREAT:">" >
| 	< LOWER:"<" >
| 	< GREATE:">=" >
| 	< LOWERW:"<=" >
|	< AND :"&&" >
|	< OR:"||" >
|	< NOT:"!" >
}
TOKEN: /* Bounded operators  */
{
  	<LC:"(">
|	<RC:")">
|	<LM:"[">
|	<RM:"]">
|	<LB:"{">
|	<RB:"}">
|	<DOT: ",">
|	<SEMICOLON : ";">
|	<QUOTE : "\"">
|	<COLON : ":">
}

TOKEN : /* Identifier*/
{
	<IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
|  	<LETTER: ["$","A"-"Z","_","a"-"z"]>
}

TOKEN : /* Constants */
{
    < CONSTANT: "0"|["1"-"9"] (<DIGIT>)* >
|   < DIGIT: ["0" - "9"] >
}


//\u5bee\ufffd\ue750
SimpleNode Start() : {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Procedure() <EOF>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {
  	 return jjtn000; 
  }
| <EOF>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/	    { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//<\u7ecb\u5b2a\u7c2d\u9286\u5906\u554b void main() {\u9286\u5823\ue1e2\u9359\u30e5\u6f61\u9286\u588b
void Procedure():{/*@bgen(jjtree) Procedure */
  SimpleNode jjtn000 = new SimpleNode(JJTPROCEDURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Procedure */
        try {
/*@egen*/
	<VOID> <MAIN> <LC><RC>
	SentenceBlock()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//\u9286\u5823\ue1e2\u9359\u30e5\u6f61\u9286\u5906\u554b{\u9286\u5823\ue1e2\u9359\u30e4\u8986\u9286\u588b
void SentenceBlock():{/*@bgen(jjtree) SentenceBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SentenceBlock */
        try {
/*@egen*/
	<LB>(Statement())*<RB>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

//\u9286\u5823\ue1e2\u9359\u30e4\u8986\u9286\u5906\u554b\u9286\u5823\u7974\u934a\u8270\ue1e2\u9359\u30e3\ufffd|\u9286\u581f\u6f6f\u6d60\u60f0\ue1e2\u9359\u30e3\ufffd|\u9286\u581d\u60ca\u941c\ue21d\ue1e2\u9359\u30e3\ufffd\u7edb\ufffd....
void Statement():{/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
        try {
/*@egen*/
	declaration()    //\u6fb9\u7248\u69d1\u7487\ue15e\u5f5e
	|assignment()     //\u74a7\u5b2a\ufffd\u7487\ue15e\u5f5e
	|If()    //if\u93c9\u2032\u6b22\u7487\ue15e\u5f5e
	|Switch() //switch\u93c9\u2032\u6b22\u7487\ue15e\u5f5e
	|While()   //while\u5bf0\ue046\u5e46\u7487\ue15e\u5f5e
	|do_while() //do_while\u5bf0\ue046\u5e46\u7487\ue15e\u5f5e
	|For()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/   //for\u5bf0\ue046\u5e46\u7487\ue15e\u5f5e	


}

//\u6fb9\u7248\u69d1\u7487\ue15e\u5f5e\u951b\u581d\u6e24\u9350\u72b3\u02c9\u951b\ufffd
 void declaration():
{/*@bgen(jjtree) declaration */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String type;//\u9359\u6a40\u567a\u7eeb\u8bf2\u7037
  MyNode tempnode=null;//\u9366\u3127\ue0c1\u9359\u75af\u3003\u5be4\u8679\u73dbtempnode\u947a\u509c\u5063\u951b\u5c7d\u74e8\u934c\u3125\u5f49\u95b2\u5fd3\u53cf\u95ae\u3124\u4fca\u93ad\ufffd
  Token node;//\u9357\u66e1\u761d
  String name;//\u9359\u6a40\u567a\u935a\u5d87\u041e
  int D=0;//\u93c1\u626e\u7c8d\u7f01\u5b58\u669f
}
{/*@bgen(jjtree) declaration */
        try {
/*@egen*/
	type=Type()
	node=<IDENTIFIER>
	{
		name=node.image;
		//\u59ab\ufffd\u7161\u93cd\u56e9\u305a\u7ed7\ufe3d\u69f8\u935a\ufe40\u51e1\u7039\u6c2b\u7b9f\u951b\u5c83\u5ae2\u93c4\ue21a\u57af\u93b6\u30e9\u654a\u951b\u5c84\ufffd\u9351\u8679\u25bc\u6434\ufffd
		if(myNodeList!=null)
		{
			if(myNodeList.isExientence(name))
			{
			  String s = "number "+node.beginLine+"  variable \""+name+"\" already exist";
                JOptionPane.showMessageDialog(null,s,"error", JOptionPane.ERROR_MESSAGE);
			}
		}
		tempnode=new MyNode(name,type);
	}
	("["//\u947b\u30e4\u8d1f\u93c1\u626e\u7c8d
	{
		D++;
		tempnode.D  = D;
	}
	(node=<CONSTANT>
	 {
		if(D==1)//\u947b\u30e4\u8d1f\u6d93\ufffd\u6dee\u93c1\u626e\u7c8d\u951b\u5c83\ue195\u7f03\ue1bf\ue511\u95c0\u57ae\u5bb3
		{
			int row=Integer.parseInt(node.image);
			tempnode.row = row;
			tempnode.a=new int[row];
			tempnode.rflag=1;
		}
		else if(D==2)//\u947b\u30e4\u8d1f\u6d5c\u5c80\u6dee\u93c1\u626e\u7c8d\u951b\u5c83\ue195\u7f03\ue1bc\u57aa\u95c0\u57ae\u5bb3
		{
			int col=Integer.parseInt(node.image);
			tempnode.col = col;
			tempnode.a=null;
			tempnode.b=new int[tempnode.row][col];
			tempnode.cflag=1;
		}
	  })?
	"]")*  
	(Assign(tempnode))?//\u74a7\u5b2a\ufffd\u7487\ue15e\u5f5e
	//\u704f\u55d7\u57b0\u7487\u8bf2\u5f47\u9428\u52eb\u5f49\u95b2\u5fd3\u59de\u934f\u30e5\u57cc\u7ed7\ufe40\u5f7f\u741b\ue7d2\u7d1d\u9a9e\u8235\u4eee\u6fb6\u5d87\u5e47\u9366\ufffd
	{
		myNodeList.addNode(tempnode);
		D=0;
		node=null;
		tempnode=null;
		name=null;
	}
	
//\u7487\u8bf2\u5f47\u9422\ufffd,"\u9352\u55d7\u58ca\u9428\u52ea\u7b05\u6d93\ufffd\u5f49\u95b2\u5fe5\u7d1d\u5a34\u4f7a\u25bc\u935a\u5c7c\u7b02
	(","node=<IDENTIFIER>
	{
		name=node.image;
		if(myNodeList!=null)
		{
			if(myNodeList.isExientence(name))
			{
			  String s = "number "+node.beginLine+"  variable \""+name+"\" already exist";
			   JOptionPane.showMessageDialog(null,s,"error", JOptionPane.ERROR_MESSAGE);

			}
		}
		tempnode=new MyNode(name,type);
	}
	("["
	    {
		D++;
		tempnode.D = D;
	    }
	    (node=<CONSTANT>
	    {
	    if(D==1)
		{
			int row=Integer.parseInt(node.image);
			tempnode.row = row;
			tempnode.a=new int[row];       
			tempnode.rflag=1;
		}
		else if(D==2)
		{
			int col=Integer.parseInt(node.image);
			tempnode.col = col;
			tempnode.a=null;
			tempnode.b=new int[tempnode.row][col];
			tempnode.cflag=1;
		}
		})?
	"]")* 
	(Assign(tempnode))?
	{
		myNodeList.addNode(tempnode);
		D=0;
		tempnode=null;
		node=null;
		name=null;
	}
	)*
	";"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//\u74a7\u5b2a\ufffd\u7487\ue15e\u5f5e\u951b\u581f\u6f79\u752f\u5483\u7d1a
void Assign(MyNode tempnode):
{/*@bgen(jjtree) Assign */
        SimpleNode jjtn000 = new SimpleNode(JJTASSIGN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Record temp;//\u6d93\u5b58\u6902\u9359\u6a40\u567a
	String st;//\u6d93\u5b2b\u7223\u6d93\u5b58\u6902\u93cd\u56ea\ue187
	int value; //\u9359\u6a40\u567a\u9428\u52eb\ufffd
	int i=0;
	int j=0;
	String lon;
	int row,col;
	int nr=0;  
}
{/*@bgen(jjtree) Assign */
        try {
/*@egen*/
	"="     //\u741b\u3127\u305a\u74a7\u5b2a\ufffd\u5bee\ufffd\ue750
	(
	temp=Factor()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*///\u9359\u6828\u669f
	{
		
		value=Integer.parseInt(temp.getValue());
		tempnode.result=value;
		count++;
		QTTable.addQTInfo(new QTInfo(count,"=",temp.getName(),"-",tempnode.name)); 
	}
	|
	("{"
	{
ArrayList<Integer> list=new ArrayList<Integer>();//\u9422\u3124\u7af4\u6d93\ufffd/ArrayList<Integer>\u6769\u70b5\u753b\u93ba\u30e6\u6579\u935a\u5ea8\u6f70\u6fb6\u0444\u5aed\u9359\u5cf0\u5534\u9428\u52eb\ufffd\u951b\u5c7d\u7ddf\u93b5\ue0a3\u5f3f\u7039\u5c7e\u762f\u935a\u5eaf\u7d1d\u9350\ufffd/\u6dc7\ue1bd\u657ctempnode\u9a9e\u5241\u6553\u93b4\u612e\u6d49\u6434\u65c2\u6b91\u9365\u6d98\u5393\u5bee\u5fcb\ufffd

	}
	(
	(temp=Factor()
	{
	    if(tempnode.rflag==1&&nr>=tempnode.row)
	    {
			String s  = "number "+" Index out of array!! "+tempnode.name;//\u741b\u5c83\u79fa\u9423\u5c7e\u59e4\u95bf\u6b0d\ufffd
			JOptionPane.showMessageDialog(null,s,"error", JOptionPane.ERROR_MESSAGE);
	    }
	    nr++;//\u6fe1\u509b\u7049\u6d93\u5d86\u59e4\u95bf\u6b19\u7d1d\u9352\u6b12\ue511++
		value=Integer.parseInt(temp.getValue());
		list.add(value);
	}
	(","temp=Factor()
	{
		if(tempnode.rflag==1&&nr>=tempnode.row)
	    {
			String s = "number "+" Index out of array!! "+tempnode.name;//\u74d2\u5a44\u666b\u93b6\u30e9\u654a
			JOptionPane.showMessageDialog(null,s,"error", JOptionPane.ERROR_MESSAGE);
	    }
	    nr++;
		value=Integer.parseInt(temp.getValue());
		list.add(value);
	}
	)* 
	{
		if(tempnode.rflag==0)//\u6dc7\ue1bd\u657c\u7039\u6c2b\u7b9f\u93cd\u56ea\ue187
		{
		   tempnode.rflag=1;
		   tempnode.row = nr;
		   tempnode.a=new int[nr];
		}
		st="T"+(ncount);
		ncount++;
		count++;
		QTTable.addQTInfo(new QTInfo(count,"=",0+"","-",st));
		Iterator it=list.iterator();//\u6769\ue15d\u552c\u9359\u6754ist\u95b2\u5c80\u6b91\u93c1\u7248\u6581\u6769\ufffd/tempnode.a\u93c1\u626e\u7c8d\u95b2\u5c7b\ufffd
		while(it.hasNext())
		{
			tempnode.a[i]=(Integer)it.next();
	     	count++;
		    QTTable.addQTInfo(new QTInfo(count,"[]=",tempnode.a[i]+"","-",tempnode.name+"["+st+"]"));//\u701b\u6a3b\u669f
		    i++;
		    lon=st;
		    if(it.hasNext())
		    {
		    st="T"+(ncount);
		    ncount++;
		    count++;
		    QTTable.addQTInfo(new QTInfo(count,"+",lon,4+"",st));
		    }
		}	
	})
	|
	( Array(tempnode,j++,list)(","Array(tempnode,j++,list) //\u6d5c\u5c80\u6dee\u93c1\u626e\u7c8d\u74a7\u5b2a\ufffd\u951b\u5c83\u769f\u9422\u02cbrray()\u9286\ufffd
)*  //\u6d5c\u5c80\u6dee\u93c1\u626e\u7c8d\u701b\u6a3b\u669f\u93c4\ue219\u7af4\u741b\u5c7c\u7af4\u741b\u5c80\u6b91\u701b\u6a3f\u7e58\u9350\u546d\u74e8\u95b2\u5c80\u6b91
	{		if(tempnode.rflag==0)
		{
			tempnode.rflag=1;
			tempnode.row = j;
			tempnode.b=new int [tempnode.row][tempnode.col];
		}
		i=0;j=0;int co=0;
		st="T"+(ncount);
		ncount++;
		count++;
		QTTable.addQTInfo(new QTInfo(count,"=",0+"","-",st));//\u701b\u6a3b\u669f//\u5bee\ufffd\ue750
		Iterator ait=list.iterator();
		while(ait.hasNext())
		{
			tempnode.b[i][j]=(Integer)ait.next();
			count++;
		    QTTable.addQTInfo(new QTInfo(count,"[]=",tempnode.b[i][j]+"","-",tempnode.name+"["+st+"]"));
		    lon=st;
		    if(ait.hasNext()){
		    st="T"+(ncount);
		    ncount++;
		    count++;
		    QTTable.addQTInfo(new QTInfo(count,"+",lon,4+"",st));
		    }
			j++;
			co++;
			if(co%tempnode.col==0)//\u7487\u8bf2\u756c\u6d93\ufffd\ue511\u935a\u5eaf\u7d1d\u7f01\u0445\u753b\u7487\u8bb3\u7b05\u6d93\ufffd\ue511
			{
				i++;
				j=0;
			}
		}
	})
	)
   "}")
    )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


//\u6d5c\u5c80\u6dee\u93c1\u626e\u7c8d\u74a7\u5b2a\ufffd\u951b\u581d\u755e\u93cb\u694b\u7d1a
void Array(MyNode tempnode,int row,ArrayList<Integer> list):
{/*@bgen(jjtree) Array */
        SimpleNode jjtn000 = new SimpleNode(JJTARRAY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Record temp;
	int value;  
	int i=0;
	int nr=0;
	int cl;
}
{/*@bgen(jjtree) Array */
        try {
/*@egen*/
	"{"
	{
		if(tempnode.rflag==1&&row>=tempnode.row)//\u741b\u5c83\u79fa\u9423\u5c7e\u59e4\u95bf\ufffd
		{
			String s = "number "+" Row Index out of array!! "+tempnode.name;
			JOptionPane.showMessageDialog(null,s,"error", JOptionPane.ERROR_MESSAGE);
			
		}
	}
	temp=Factor()//\u752f\u544a\u669f | \u701b\u6943\ue0c1\u6d93\u8be7\u7d19 \u9225\u6df8\u9225\ufffd \u752f\u544a\u669f  \u9225\u6f16\u9225\ufffd\u951b\ufffd

	{
	    if(tempnode.cflag==1&&nr>=tempnode.col)
	    {
			String s = "number "+" Col Index out of array!! "+tempnode.name;
			JOptionPane.showMessageDialog(null,s,"error", JOptionPane.ERROR_MESSAGE);
			
	    }
	    nr++;
		value=Integer.parseInt(temp.getValue());
		list.add(value);
	}
(","temp=Factor()//\u752f\u544a\u669f | \u701b\u6943\ue0c1\u6d93\u8be7\u7d19 \u9225\u6df8\u9225\ufffd \u752f\u544a\u669f  \u9225\u6f16\u9225\ufffd\u951b\ufffd

	{
		
	    if(tempnode.cflag==1&&nr>=tempnode.col)//\u9352\u6944\u79fa\u9423\u5c7e\u59e4\u95bf\ufffd
	    {
			String s = "number "+" Col Index out of array!! "+tempnode.name;
			JOptionPane.showMessageDialog(null,s,"error", JOptionPane.ERROR_MESSAGE);
	    }
	    nr++;
		value=Integer.parseInt(temp.getValue());
		list.add(value);
	}
	)*
	{
		if(tempnode.cflag==0)
		{
		   tempnode.cflag=1;
		   tempnode.col = nr;
		}
	}
    "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


//\u7487\u8bf2\u5f47\u934a\u7877\u7d19\u7039\u4f79\u7044\u951b\ufffd
//Record\u951b\u6c2c\u769d\u7441\u536came\u9286\u4e7falue\u6dc7\u2103\u4f05\u951b\u5c7d\u6e6a\u7487\ue15d\u7b9f\u9352\u55d8\u703d\u6769\u56e9\u25bc\u6d93\ue15d\u7d94\u6d93\u8f70\u590d\u93c3\u8dfa\u5f49\u95b2\u5fce\u5a07\u9422\ufffd
//Factor\u951b\u582c\u7d1a\u9225\u65ba\ufffd>\u752f\u544a\u669f | \u701b\u6943\ue0c1\u6d93\u8be7\u7d19 \u9225\u6df8\u9225\ufffd \u752f\u544a\u669f  \u9225\u6f16\u9225\ufffd\u951b\ufffd
//Factor\u741b\u3127\u305a\u93b6\u5a41\u7af4\u6d93\ue045\u66a3\u93c1\u5e2e\u7d1d\u9359\u6a40\u567a\u951b\u5c7d\u7236\u95b2\u5fe5\u7d1d\u741b\u3128\u63ea\u5bee\u5fd4\u57a8\u93c1\u626e\u7c8d\u675e\ue101\u5d32\u93b4\u612a\u8d1f\u6d93\ufffd\u91dcRecord\u7eeb\u4f19\u7d1d
//\u7487\u30e7\u88ab\u701b\u6a3a\u6e6a\u6d93\u3084\u91dc\u9359\u6a40\u567aname\u935c\u5bc1alue\u9286\u4ff7ame\u701b\u6a3a\u504d\u935a\u5d85\u74e7\u951b\u5bc1alue\u701b\u6a3a\ufffd
Record Factor():
{/*@bgen(jjtree) Factor */
        SimpleNode jjtn000 = new SimpleNode(JJTFACTOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String name,value="";  
	Token node;
	int D=0;
	MyNode tempnode;
	int row=-1,col=-1;
	int rl,cl;
	String temp="",lon="";
	Record r;
}
{/*@bgen(jjtree) Factor */
        try {
/*@egen*/
	(node=<CONSTANT>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*///\u752f\u544a\u669f
	{
		name=node.image;
		value=node.image;
		return new Record(name,value);
	})
	| "("r=Expression()")"/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{//\u741b\u3128\u63ea\u5bee\ufffd
		return r;
		}
	|(node=<IDENTIFIER>//\u93cd\u56ea\u7611\u7ed7\ufffd
	{
		name=node.image;
		tempnode=myNodeList.getNode(name);//\u6d60\u5ea3\ue0c1\u9359\u75af\u3003\u95b2\u5c7e\u58d8\u9352\u7680ame\u9359\u6a40\u567a\u951b\u5c7d\u82df\u93b6\u598came\u9428\u52eb\u53cf\u95ae\u3124\u4fca\u93ad\ue21d\u7974\u7f01\u6a9bempnode\u9359\u6a40\u567a
	}
	("["node=<CONSTANT>
	{
		D++;
		if(D==1)
		{
		    row=Integer.parseInt(node.image);//\u93b6\u5a43\u66a3\u9368\u5b2a\ue1ee\u749e\ue4cfnteger\u675e\ue101\u5d32\u93b4\u612c\u7180\u93c8\ue101\u669f\u93b9\ue1be\u88ab\u9368\u5a94nt\u9286\ufffd
		}
		else if(D==2)
		{
			col=Integer.parseInt(node.image);			
		}
	}
	"]")*
	{
		
		if(D==1) 
		{
	  	    if(!myNodeList.isExientence(name)||(myNodeList.getNode(name)).D!=1)
		   {
			String s = "number "+node.beginLine+" Array "+name+" is undefined";// \u93c1\u626e\u7c8d\u5a0c\u2103\u6e41\u7039\u6c2b\u7b9f\u951b\u5c7e\u59e4\u95bf\ufffd
			JOptionPane.showMessageDialog(null,s,"error", JOptionPane.ERROR_MESSAGE);
		
		   }	
		   if(row>=tempnode.row)
		   {
			   String s = "number "+node.beginLine+" Index out of array!! "+name;//\u74d2\u5a44\u666b\u93b6\u30e9\u654a
			   JOptionPane.showMessageDialog(null,s,"error", JOptionPane.ERROR_MESSAGE);
			 
			}
//\u9365\u6d98\u5393\u5bee\ufffd
		   value=tempnode.a[row]+"";
		   temp="T"+(ncount);
		   ncount++;
		   count++;
		   QTTable.addQTInfo(new QTInfo(count,"*",row+"",4+"",temp));//\u947e\u5cf0\u5f47\u93c1\u626e\u7c8d\u9428\u52eb\u53c6\u9359\uff45\u6e74\u9367\ufffd
		   lon=temp;
			temp="T"+ncount;
			ncount++;
			count++;
		    QTTable.addQTInfo(new QTInfo(count,"=[]",name+"["+lon+"]","-",temp));//\u9359\u6a3a\u6f43\u9359\u6828\u669f
		}
		else if(D==2)  
		{
		    if(!myNodeList.isExientence(name)||(myNodeList.getNode(name)).D!=2)
		   {
			
			String s = "number "+node.beginLine+" Array "+name+" is undefined";
			JOptionPane.showMessageDialog(null,s,"error", JOptionPane.ERROR_MESSAGE);
			
		   }
		    if(row>=tempnode.row)
			{
			   String s = "number "+node.beginLine+" Row Index out of array!! "+name;
			   JOptionPane.showMessageDialog(null,s,"error", JOptionPane.ERROR_MESSAGE);
			  
			}
			if(col>=tempnode.col)
			{
			   String s = "number "+node.beginLine+" Col Index out of array!! "+name;
			   JOptionPane.showMessageDialog(null,s,"error", JOptionPane.ERROR_MESSAGE);
			   
			}
			value=tempnode.b[row][col]+"";
			cl=tempnode.col;//c1\u741b\u3127\u305a\u6d5c\u5c80\u6dee\u93c1\u626e\u7c8d\u9428\u52eb\u57aa\u95c0\u57ae\u5bb3
	     	temp="T"+(ncount);//\u6d93\u5b58\u6902\u9359\u6a40\u567a\u6d93\u5b2b\u7223\u951b\u5c7d\u57b5\u6fee\u5b2a\ufffd\u6d93\ufffd
		    ncount++;
		    count++;//\u9365\u6d98\u5393\u5bee\u5fd4\u7223\u9359\ufffd
		    QTTable.addQTInfo(new QTInfo(count,"*",row+"",cl+"",temp));//\u947e\u5cf0\u5f47\u93c1\u626e\u7c8d\u9428\u52eb\u53c6\u9359\uff45\u6e74\u9367\ufffd
		    lon=temp;//\u6d93\ufffd\u91dc\u93cd\u56ea\ue187
		    temp="T"+(ncount);
		    ncount++;
		    count++;
		    QTTable.addQTInfo(new QTInfo(count,"+",lon,col+"",temp));//\u93c7\u5b58\u67catemp\u93cd\u56ea\ue187
		    lon=temp;//\u6d93\ufffd\u91dc\u93cd\u56ea\ue187
		    temp="T"+(ncount);
		    ncount++;
		    count++;
		    QTTable.addQTInfo(new QTInfo(count,"*",lon,4+"",temp));//\u93b5\u60e7\u57cc\u6d63\u5d87\u7586
		    lon=temp;
			temp="T"+ncount;
			ncount++;
			count++;
		    QTTable.addQTInfo(new QTInfo(count,"=[]",name+"["+lon+"]","-",temp)); //\u9359\u6a3a\u6f43\u9359\u6828\u669f

		}
		else if(D==0)
		{
			 if(!myNodeList.isExientence(name)||(myNodeList.getNode(name)).D!=0)
		    {
			String s = "number "+node.beginLine+" variable "+name+" is undefined";
			JOptionPane.showMessageDialog(null,s,"error", JOptionPane.ERROR_MESSAGE);
			
		   }
		  value=tempnode.result+"";
		}
	}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		if(tempnode.D==0)
		{//\u752f\u544a\u669f
			return new Record(tempnode.name,value);
		}
		else
		{//\u93c1\u626e\u7c8d
			return new Record(temp,value);  //\u6769\u65bf\u6d16\u93c1\u626e\u7c8d\u9428\u5247emp\u935c\u5c7d\ufffd
		}
	})/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


//\u74a7\u5b2a\ufffd\u7487\ue15e\u5f5e\u951b\u5822\u5e07\u6963\u3086\u70e6\u951b\ufffd
void assignment() :
{/*@bgen(jjtree) assignment */
        SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
	Token id;
	Token node;
	String idenfier; //\u741a\ue0a5\u7974\u934a\u714e\ue1ee\u749e\ufffd
	Record middle;
	String symbol;
	int result;
	MyNode tempnode=null;//\u7ed7\ufe40\u5f7f\u741b\u3127\u7ca8\u9410\u7470\ue1ee\u749e\ufffd

}
{/*@bgen(jjtree) assignment */
        try {
/*@egen*/
	(
	id=<IDENTIFIER>//\u93cd\u56ea\u7611\u7ed7\ufffd
	{
		idenfier=id.image;
		if(!myNodeList.isExientence(idenfier)){
				String s = "variable \""+idenfier+"\" doesn't exist."
				+"\nwrong number "+id.beginLine;
				JOptionPane.showMessageDialog(null,s,"error", JOptionPane.ERROR_MESSAGE);
				
			}
		tempnode=myNodeList.getNode(idenfier);//\u947e\u5cf0\u5f47\u7035\u7845\u8584\u9428\u52eb\u7d29\u9422\ufffd
		if(tempnode.type=="char"|tempnode.type=="short"){
			String s = "variable type is not  right"
				+"\nwrong number "+id.beginLine;
				JOptionPane.showMessageDialog(null,s,"error", JOptionPane.ERROR_MESSAGE);
			
		}
	}
	((<ASSIGNMENT>middle=Expression()
	{
		count++;
		QTTable.addQTInfo(new QTInfo(count,"=",middle.getName(),"_",idenfier));
		tempnode.result=Integer.parseInt(middle.getValue());

		
	})
	|((node=<PLUS>|node=<MINUS>|node=<MULTIPLY>|node=<DIVIDE>|node=<REMAINDER>)
	{
		symbol=node.image;
	}
	<ASSIGNMENT>middle=Expression()
	{
		count++;
		QTTable.addQTInfo(new QTInfo(count,symbol,idenfier,middle.getName(),idenfier));
		if(symbol.equals("+")){
			tempnode.result+=Integer.parseInt(middle.getValue());//\u93c7\u5b58\u67ca\u93c1\u677f\ufffd
		}else if(symbol.equals("-")){
			tempnode.result+=Integer.parseInt(middle.getValue());//\u93c7\u5b58\u67ca\u93c1\u677f\ufffd
		}else if(symbol.equals("*")){
			tempnode.result*=Integer.parseInt(middle.getValue());//\u93c7\u5b58\u67ca\u93c1\u677f\ufffd
		}else{
			tempnode.result/=Integer.parseInt(middle.getValue());//\u93c7\u5b58\u67ca\u93c1\u677f\ufffd
		}
		

	})
	|(<SELFPLUS>
	{
		count++;
		QTTable.addQTInfo(new QTInfo(count,"+",idenfier,"1",idenfier));
		tempnode.result+=1;//\u93c7\u5b58\u67ca\u93c1\u677f\ufffd

	})
	|(<SELFMINUS>{
		count++;
		tempnode.result-=1;//\u93c7\u5b58\u67ca\u93c1\u677f\ufffd
		QTTable.addQTInfo(new QTInfo(count,"-",idenfier,"1",idenfier));

	}))
	(";"|","))
|	(<SELFPLUS> id=<IDENTIFIER>
	{
		idenfier=id.image;
		count++;
		QTTable.addQTInfo(new QTInfo(count,"+",idenfier,"1",idenfier));
	}
	";")
|	(<SELFMINUS> id=<IDENTIFIER>
	{
		idenfier=id.image;
		count++;
		QTTable.addQTInfo(new QTInfo(count,"-",idenfier,"1",idenfier));
	}
	";")/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//\u9286\u581f\u6f6f\u6d60\u60f0\ue1e2\u9359\u30e3\ufffd\u922b\ufffdif\u9286\u581f\u6f6f\u6d60\u8eb2\ufffd\u9286\u5823\ue1e2\u9359\u30e5\u6f61\u9286\u591b\u7d19\u95ae\u6fcb\u567e\u5bee\u7334\u7d1a
void If():{/*@bgen(jjtree) If */
   SimpleNode jjtn000 = new SimpleNode(JJTIF);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   int j1, j2=0, j3;
} 
{/*@bgen(jjtree) If */
  try {
/*@egen*/
  <IF><LC>
   Condition()<RC>//\u704f\u5505f\u9428\u52ec\u6f6f\u6d60\u6735\u8d1f\u942a\u71b8\u6902\u9428\u52ee\ue1e2\u9359\u30e5\u5553\u934f\u30e5\u6d13\u934f\u51a8\u7d21
  {
   count++;
   j1=count;
   QTTable.addQTInfo(new QTInfo(count,"J","_","_",String.valueOf(j1)+"#"));//if\u934b\u56e7\u56ad\u9359\uff4f\u7d1dtarget\u9422\u25661#\u6d60\uff46\u6d5b
   }
   //if\u7487\ue15e\u5f5e\u9367\ufffd
   SentenceBlock()//if\u942a\u71b7\u56ad\u9359\uff4f\u7d1d\u6fc9\ue0a2\u5553if\u93c9\u2032\u6b22\u93b4\u612e\u73db\u93c3\u5241\u6b91\u7487\ue15e\u5f5e\u9365\u6d98\u5393\u5bee\ufffd
  
{
  
   count++;
   QTTable.addQTInfo(new QTInfo(count,"J","_","_",String.valueOf(j2)+"#"));//\u93b5\ufffd\u6e41\u7487\ue15e\u5f5e\u93b5\u0446\ue511\u7039\u5c7e\u762f\u6d94\u5b2a\u6097\u951b\u5c7e\u574a\u9354\u72ba\u70e6\u675e\ue103\ue1e2\u9359\u30ef\u7d1dtarget\u9422\u21972#\u6d60\uff46\u6d5b
   QTTable.replaceFirst(String.valueOf(j1)+"#",String.valueOf(count+1)+"");
  //\u704f\u55d8\u669f\u9365\u70b2\uff5e\u9352\u677f\u57b0\u93b5\u5ce3f\u9428\u52eb\u4ea3\u9351\u54c4\u5f5b\u951b\u5c7d\u76a2j1#\u9422\u255fount+1\u93c7\u630e\u5d32
   }

(
   LOOKAHEAD(1)
<ELSEIF><LC>Condition()<RC>//\u704f\u5500lse\u9428\u52ec\u6f6f\u6d60\u8235\u579a\u7ed4\u5b2b\u6902\u9428\u52ee\ue1e2\u9359\u30ef\u7d1d\u9350\u6b0f\u53c6\u9365\u6d98\u5393\u5bee\ufffd
  {
   count++;
   j3=count;
   QTTable.addQTInfo(new QTInfo(count,"J","_","_",String.valueOf(j3)+"#"));//else\u934b\u56e7\u56ad\u9359\ufffdtarget\u9422\u25663#\u6d60\uff46\u6d5b
   }
   SentenceBlock()//elseif\u9428\u52ed\u6e61\u9351\u54c4\u5f5b\u951b\u5c7d\uff5e\u9350\u6a88lseif\u93c9\u2032\u6b22\u6d93\u8679\u6e61\u9428\u52ee\ue1e2\u9359\u30e5\u6d13\u934f\u51a8\u7d21
{
   count++;
       QTTable.addQTInfo(new QTInfo(count,"J","_","_",String.valueOf(j2)+"#"));//else\u95b2\u5c80\u6b91\u93b5\ufffd\u6e41\u7487\ue15e\u5f5e\u93b5\u0446\ue511\u7039\u5c7e\u762f\u6d94\u5b2a\u6097\u951b\u5c7e\u574a\u9354\u72ba\u70e6\u675e\ue100\u6d13\u934f\u51a8\u7d21\u951b\u5bbcarget\u9422\u21972#\u6d60\uff46\u6d5b
   QTTable.replaceFirst(String.valueOf(j3)+"#",String.valueOf(count+1)+"");//\u9365\u70b2\uff5e\u9352\u7673lseif\u9428\u52eb\u4ea3\u9351\u54c4\u5f5b\u951b\u5c7d\u76a2j3#\u9422\u255fount+1\u6d60\uff46\u6d5b
   }
   )*
  (
    LOOKAHEAD(1)
    <ELSE>
   SentenceBlock()//\u6fc9\ue0a2\u5553else\u93c9\u2032\u6b22\u93b4\u612e\u73db\u93c3\u5241\u6b91\u59e3\u5fce\u7af4\u93c9\u00a4\ue1e2\u9359\u30e7\u6b91\u9365\u6d98\u5393\u5bee\ufffd
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
  QTTable.replaceAll(String.valueOf(j2)+"#",String.valueOf(count+1)+"");//\u704f\u55d8\u588d\u93c8\u590c\u6b91\u93c3\u72b3\u6f6f\u6d60\u60f0\u70e6\u675e\ue103\ue1e2\u9359\u30e5\u6f61\u9428\u522f2#\u93c7\u630e\u5d32\u6d93\u54c4\u7d8b\u9353\u5d87\u6b91count+1
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  //\u7ecb\u5b2a\u7c2d\u7f01\u64b4\u6f6b
}

//switch\u93c9\u2032\u6b22\u7487\ue15e\u5f5e\u951b\u5825\u5129\u95b2\u621d\u5df1\u951b\ufffd
void Switch():
{/*@bgen(jjtree) Switch */
SimpleNode jjtn000 = new SimpleNode(JJTSWITCH);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token node;
int j1=0;
int j2;
int next;
Record idenfier;//\u93cd\u56ea\u7611\u7ed7\ufffd
Record con;
}
{/*@bgen(jjtree) Switch */
try {
/*@egen*/
<SWITCH>{j2=-1;}
<LC>
idenfier=Expression()
<RC>
<LB>(
<CASE>
{
	QTTable.replaceFirst(String.valueOf(j1)+"#",String.valueOf(count+1));
}
con=Expression()
{
	count++;
	next=count+1;
	QTTable.addQTInfo(new QTInfo(count,"J=",idenfier.getName(),con.getName(),String.valueOf(next+1)));
	count++;
	j1=count;
	QTTable.addQTInfo(new QTInfo(count,"J","_","_",String.valueOf(j1)+"#"));//\u934b\u56e7\u56ad\u9359\uff4f\u7d1dtarget\u9422\u25661#\u93cd\u56ea\ue187
}
<COLON> SentenceBlock()//\u6fc9\ue0a2\u5553\u7487\ue15e\u5f5e\u9367\u6945\u5677\u93b5\ufffd\u6e41\u7487\ue15e\u5f5e\u9428\u52eb\u6d13\u934f\u51a8\u7d21
{
	count++;
	QTTable.addQTInfo(new QTInfo(count,"J","_","_",String.valueOf(j2)+"#"));//\u74ba\u5ba0\u6d46\u951b\u5bbcarget\u9422\u25662#\u93cd\u56ea\ue187
}
<BREAK>";"
)+<DEFAULT1>
{
	QTTable.replaceFirst(String.valueOf(j1)+"#",String.valueOf(count+1));//\u9365\u70b2\uff5e\u951b\u5c7d\u76a2j1#\u9422\u3125\u7d8b\u9353\u5cdcount+1\u93c7\u630e\u5d32
	next=count+1;
}
<COLON>SentenceBlock()<BREAK>//\u6fc9\ue0a2\u5553default\u935a\u5ea3\u6b91\u7487\ue15e\u5f5e
{
	count++;
	QTTable.addQTInfo(new QTInfo(count,"J","_","_",String.valueOf(count+1)));//\u7f01\u64b4\u6f6b\u7487\ue15e\u5f5e
}";"
<RB>/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{
	QTTable.replaceAll(String.valueOf(j2)+"#",String.valueOf(count+1)+"");//\u9365\u70b2\uff5e\u951b\u5c7d\u76a2\u93b5\ufffd\u6e41\u9428\u522f2#\u9422\u3125\u7d8b\u9353\u5d87\u6b91count+1\u93c7\u630e\u5d32
}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

//do_while\u7487\ue15e\u5f5e\u951b\u5822\u25bc\u94cf\u572d\u7e51\u951b\ufffd
void  do_while():
{/*@bgen(jjtree) do_while */
        SimpleNode jjtn000 = new SimpleNode(JJTDO_WHILE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token node;
	int next;
	int dofirst;
}
{/*@bgen(jjtree) do_while */
        try {
/*@egen*/
	<DO>
	{
		//\u7481\u9881\u7d87do\u9428\u52ed\ue0c7\u6d93\ufffd\u91dc\u7487\ue15e\u5f5e
  		dofirst=count+1;
	}
	SentenceBlock()
   <WHILE><LC>
    While_Condition()
   {
    	//\u93c9\u2032\u6b22\u93b4\u612e\u73db\u74ba\u5ba0\u6d46\u9352\u677f\u60ca\u941c\ue219\u7d8b\u9428\u52ed\ue0c7\u6d93\ufffd\u6f6f\u7487\ue15e\u5f5e
   		QTTable.replaceAll("-2#",String.valueOf(dofirst));
   }
   <RC>";"/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
  		next=count+1;
	  	//\u93b5\ufffd\u6e41\u93c9\u2032\u6b22\u6d93\u5d86\u579a\u7ed4\u5b2d\u70e6\u9351\u54c4\u60ca\u941c\ue219\u7d8b\u9357\u5145\u7b05\u6d93\ufffd\u6f6f\u7487\ue15e\u5f5e
	  	QTTable.replaceAll("0#",String.valueOf(next));
   }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//while\u7487\ue15e\u5f5e\u951b\u5822\u25bc\u94cf\u572d\u7e51\u951b\ufffd
void While():
{/*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token node;
  int j1;
  int j2;
  int next;
  int next1;
  int wh;
}
{/*@bgen(jjtree) While */
  try {
/*@egen*/
  <WHILE><LC>
  {
  	next1=count+1;
  }
  While_Condition()<RC>
  {
  	wh=count+1;	
  	//\u6769\u6d98\u53c6\u5bf0\ue046\u5e46\u6d63\ufffd
  	QTTable.replaceAll("-2#",String.valueOf(wh));
  	//\u704f\u551ahile\u93c9\u2032\u6b22\u6d93\u5d86\u579a\u7ed4\u5b2c\u6b91\u934b\u6c2b\u7af4\u6d93\ue045\u7223\u7481\ufffd
  	QTTable.replaceAll("0#",String.valueOf(wh)+"&");
  }
  SentenceBlock()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {	
  	count++;
  	next=count+1;
  	QTTable.replaceAll(String.valueOf(wh)+"&",String.valueOf(next));
  	//\u5bf0\ue046\u5e46\u7f01\u64b4\u6f6b\u74ba\u5ba0\u6d46\u6769\u65bf\u6d16\u9352\u3086\u67c7\u93c9\u2032\u6b22\u93c4\ue21a\u60c1\u93b4\u612e\u73db
  	QTTable.addQTInfo(new QTInfo(count,"J","_","_",String.valueOf(next1)));
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//while\u6d93\ue160\u6b91\u93c9\u2032\u6b22\u9352\u3086\u67c7\u7487\ue15e\u5f5e\u951b\u5822\u5e07\u6963\u3086\u70e6\u951b\ufffd
void While_Condition():
{/*@bgen(jjtree) While_Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE_CONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token node;
  Record result;
  Record middle;
  int j=0;
  int j1;
  int j2;
  int j3=-2;
  String symbol;
}
{/*@bgen(jjtree) While_Condition */
  try {
/*@egen*/
  result=Expression()
  ((node=<LOWER>|node=<GREAT>|node=<GREATE>|node=<LOWERW>|node=<EQUAL>|node=<UNEQUAL>)
  {
  	symbol=node.image;
  }
   middle=Expression()
  {
  	count++;
    con=count;
  	QTTable.addQTInfo(new QTInfo(count,"j"+symbol,result.getName(),middle.getName(),String.valueOf(con)+"#"));	
  	count++;
	QTTable.addQTInfo(new QTInfo(count,"j","_","_",String.valueOf(j)+"#"));	
  }
	)
  (<AND>
  {
  	//\u7f01\u0445\u753b\u9352\u3086\u67c7
  	j1=count+1;
  	QTTable.replaceFirst(String.valueOf(con)+"#",String.valueOf(j1));
  }
  While_Condition())*
  {
  	//\u93c9\u2032\u6b22\u93b4\u612e\u73db\u934b\u6c2b\u7af4\u6d93\ue045\u7223\u7481\ufffd
  	QTTable.replaceFirst(String.valueOf(con)+"#",String.valueOf(j3)+"#");
  }
  (<OR>
  {
  	//and\u93c9\u2032\u6b22\u95ae\u6212\u7b09\u93b4\u612e\u73db\u9428\u52ee\u763d\u74ba\u5ba0\u6d46\u9352\u7681r
  	j2=count+1;
  	QTTable.replaceAll(String.valueOf(j)+"#",String.valueOf(j2));
  }
  While_Condition())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  
}

//for\u5bf0\ue046\u5e46\u7487\ue15e\u5f5e\u951b\u581f\u6f79\u752f\u5483\u7d1a
void For():
{/*@bgen(jjtree) For */
         SimpleNode jjtn000 = new SimpleNode(JJTFOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
/*@egen*/	
	 int j1;
	 int j2;
 	 Token node=null,node1=null;
}
{/*@bgen(jjtree) For */
        try {
/*@egen*/
	<FOR><LC>	
    assignment(){j1=count+1;}//Assignment\u93c4\ue21d\u7974\u934a\u8270\ue1e2\u9359\u30ef\u7d1dj1\u741b\u3127\u305a\u93cd\u56ea\ue187for\u7487\ue15e\u5f5e\u9428\u52ed\ue0c72\u93c9\u00a4\ue1e2\u9359\u30ef\u7d1d\u6d93\u5d88\u5158count++,
    //\u9365\u72b1\u8d1f\u7455\u4f77\u7e5a\u7487\u4f78\u6e6a\u93c3\u72b3\u6f6f\u6d60\u60f0\u70e6\u675e\ue103\ue1e2\u9359\ufffd\u9359\ue219\u4e92\u74ba\u51b2\u6d16for\u9428\u52ed\ue0c7\u6d93\ufffd\u6f6f\u7487\ue15e\u5f5e\u951b\u5b91ount\u93c4\ue21a\u53cf\u705e\ufffd\u5f49\u95b2\ufffd
	While_Condition()//\u93c9\u2032\u6b22\u9352\u3086\u67c7\u7487\ue15e\u5f5e
	{//\u9350\u6b0e\u88b1\u93c9\u2033\u6d13\u934f\u51a8\u7d21
		j++;
		QTTable.replaceAll("-2#",j+"-2#");//\u942a\u71b7\u56ad\u9359\uff4f\u7d1d\u93c7\u630e\u5d32\u93b5\ufffd\u6e41\u951b\u5c7e\u59b8-2#\u93c7\u630e\u5d32\u6d93\ufffd-2#
  		QTTable.replaceAll("0#",j+"0#");//\u934b\u56e7\u56ad\u9359\uff4f\u7d1d\u93c7\u630e\u5d32\u93b5\ufffd\u6e41\u951b\u5c7e\u59b80#\u93c7\u630e\u5d32\u6d93\ufffd0#
		j2=count+1;
	}
	";"//\u6d93\ue162\u68ff\u9428\u52eb\u578e\u9359\ufffd
	//\u93c6\u5099\u7b09\u93b5\u0446\ue511++\u93b4\ufffd-\u9428\u52ee\ue1e2\u6d94\u590a\u578e\u93cb\ufffd
	((node=<IDENTIFIER>(node1=<SELFPLUS>|node1=<SELFMINUS>))|",")+//\u93cd\u56ea\u7611\u7ed7\ufffd+\u93b4\ufffd-,\u93c8\ufffd\u76af\u93c8\u5909\u7af4\u6d93\ue04e\u7d19\u9225\ufffd\u9225\u6fca\u3003\u7ec0\u70d8\ue11d\u935a\ue0a1\u7b9f\u951b\ufffd
	<RC> //\u9359\u866b\u5aed\u9359\ufffd
	SentenceBlock()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*///\u7487\ue15e\u5f5e\u9367\u6944\ue1e2\u9359\ufffd
	{//\u9350\u6b12\ue1e2\u9359\u30e5\u6f61\u7487\ue15e\u5f5e\u9428\u52eb\u6d13\u934f\u51a8\u7d21	
	{//\u93b5\u0446\ue511++\u93b4\ufffd-
		count++;//\u7035\u7470\u6d13\u934f\u51a8\u7d21\u6434\u5fd3\u5f7f\u9428\u52ec\u6437\u6d63\ufffd
		if(node1.image=="++"){
		QTTable.addQTInfo(new QTInfo(count,"+",node.image,"1",node.image));
		}//\u5a23\u8bf2\u59de\u6d93\ufffd\u6f6f\u9365\u6d98\u5393\u5bee\u5fe5\u7d1d\u9351\u82a5\u669f\u95b2\u5c80\u6b91\u9359\u509b\u669f\u93c4\ue219\u7af4\u6d93\u7300TInfo\u7035\u7845\u8584\u951b\u5bafew\u93c2\u677f\u7f13\u6d93\ufffd\u6f6f\u9365\u6d98\u5393\u5bee\u5fe5\u7d1d\u7eeb\u5a5a\u5677\u95c8\ue76d\u7bc3\u93c8\ufffd\u6d93\ue044\u5f2c\u93c1\u5e2e\u7d1d
		          //count\u93c4\ue21a\u6d13\u934f\u51a8\u7d21\u93cd\u56e7\u5f7f\u951b\ufffd+\u9428\u52eb\u6d13\u934f\u51a8\u7d21\u9429\u7a3f\u7d8b\u6d5c\u5ea2\u69f8+1\u9428\u52ef\u5045\u7ec9\u5d85\u6d13\u934f\u51a8\u7d21
		else{
		QTTable.addQTInfo(new QTInfo(count,"-",node.image,"1",node.image));
		}
		count++;//\u93cd\u56e7\u5f7f+1
		QTTable.addQTInfo(new QTInfo(count,"j","_","_",String.valueOf(j1)));//\u93c3\u72b3\u6f6f\u6d60\u60f0\u70e6\u675e\ue103\ue1e2\u9359\ufffd
	}
  		QTTable.replaceAll(j+"-2#",String.valueOf(j2));//\u93c7\u630e\u5d32j2\u9428\u52eb\ufffd
  		QTTable.replaceAll(j+"0#",String.valueOf(count+1));//\u93c7\u630e\u5d32\u7487\ue15e\u5f5e\u951b\ufffd2#\u6d60\uff48\u3003\u942a\u71b7\u56ad\u9359\uff4f\u7d1d0#\u6d60\uff48\u3003\u934b\u56e7\u56ad\u9359\ufffd
  		                                                   //\u93c7\u630e\u5d32count+1\u9428\u52eb\ufffd
  		j--;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}





//\u9286\u581f\u6f6f\u6d60\u8eb2\ufffd\u922b\u639e\u7d19\u9286\u5823\u3003\u6748\u60e7\u7d21\u9286\u5908\ufffd\u934f\u5d07\u90f4\u7ed7\ufe3a\ufffd\u9286\u5823\u3003\u6748\u60e7\u7d21\u9286\u591b\u7d1a\u951b\u5822\u25bc\u94cf\u572d\u7e51\u951b\ufffd
int Condition():
{/*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token node;
  int next;
  Record result;
  Record middle;
}
{/*@bgen(jjtree) Condition */
  try {
/*@egen*/
	//	Expression()(Relate() Expression())
  result=Expression()
  (node=<LOWER> middle=Expression()
  {
  	count++;
  	next=count+1;
  	QTTable.addQTInfo(new QTInfo(count,"j<",result.getName(),middle.getName(),String.valueOf(next+1)));
  }
  | node=<GREAT> middle=Expression()
  {
  	count++;
  	next=count+1;
  	QTTable.addQTInfo(new QTInfo(count,"j>",result.getName(),middle.getName(),String.valueOf(next+1)));
  }
  | node=<GREATE> middle=Expression()
  {
  	count++;
  	next=count+1;
  	QTTable.addQTInfo(new QTInfo(count,"j>=",result.getName(),middle.getName(),String.valueOf(next+1)));
  }
  | node=<LOWERW> middle=Expression()
  {
  	count++;
  	next=count+1;
  	QTTable.addQTInfo(new QTInfo(count,"j<=",result.getName(),middle.getName(),String.valueOf(next+1)));
  }
  | node=<EQUAL> middle=Expression()
  {
  	count++;
  	next=count+1;
  	QTTable.addQTInfo(new QTInfo(count,"j=",result.getName(),middle.getName(),String.valueOf(next+1)));
  }
  | node=<UNEQUAL> middle=Expression()
  {
  	count++;
  	next=count+1;
  	QTTable.addQTInfo(new QTInfo(count,"j!=",result.getName(),middle.getName(),String.valueOf(next+1)));
  })/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/ 
   {
  	return next;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u9354\u72b2\u567a\u6769\u612e\u757b\u741b\u3128\u63ea\u5bee\u5fe5\u7d19\u95ae\u6fcb\u567e\u5bee\u7334\u7d1a
Record Expression() : //\u741b\u3128\u63ea\u5bee\u5fd5\u6b91\u934a\u7877\u7d1d\u9359\ue044\ue629\u941e\u55d7\u59de\u9351\u5fda\u7e4d\u7ee0\u6943\u6b91\u934a\ufffd                           
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token node;
  Record rValue;//\u701b\u6a3a\u504d\u9353\u5d84\u7af4\u6d93\u7305erm()\u6dc7\u2103\u4f05
  Record middleR;//\u701b\u6a3a\u504d\u935a\u5e9d\u7af4\u6d93\u7305erm()\u6dc7\u2103\u4f05
  String result=null;//\u9353\u5d84\u7af4\u6d93\u7305erm()\u9428\u52eb\ufffd
  String middle=null;//\u935a\u5e9d\u7af4\u6d93\u7305erm()\u9428\u52eb\ufffd
  String middletemp=null;//\u935a\u5e9d\u7af4\u6d93\u7305erm()\u9428\u52eb\u6095\u7ec9\ufffd
  String temp="";//\u9353\u5d84\u7af4\u6d93\u7305erm()\u9428\u52eb\u6095\u7ec9\ufffd
  String preStr=null;
  String pretem="";//\u7ed7\ue0ff\u7af4\u6d93\ue043\u590d\u93c3\u8dfa\u5f49\u95b2\u5fd3\u6095\u7ec9\ufffd
  int perStep=0;//\u7481\u677f\u7d8d\u9366\u3124\u7af4\u6d93\ue044\u56b1\u93c1\u9881\u8151\u5a23\u535e\u53c6\u9351\u72b3\ue11e                      
}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  rValue=Term()//\u7487\u8bf2\u5f47\u9353\u5d84\u7af4\u6d93\u7305erm()
  {
   	temp=rValue.getName();
  	result=rValue.getValue();
  }
  (<PLUS> 
  {
  	if(preStr!=null){
  		pretem="T"+(ncount-1);//\u9353\u5d84\u7af4\u6d93\ue043\u590d\u93c3\u8dfa\u5f49\u95b2\ufffd
  	}	
  }
  middleR=Term(){//\u7487\u8bf2\u5f47\u935a\u5e9d\u7af4\u6d93\u7305erm()
  	middletemp=middleR.getName();
  	middle=middleR.getValue();
  	count++;//\u9365\u6d98\u5393\u5bee\u5fce\u7b05\u93cd\u56ea\u569c\u6fa7\ufffd
  	temp="T"+(ncount);//\u6d93\u5b58\u6902\u9359\u6a40\u567a
  	//\u6d93\u8f70\u7b05\u6d93\ufffd\u91dc\u6d93\u5b58\u6902\u9359\u6a40\u567a\u934b\u6c2c\u566f\u6fb6\ufffd
  	ncount++;
  	if(preStr==null){
  		QTTable.addQTInfo(new QTInfo(count,"+",rValue.getName(),middletemp,temp));
  		
  	}else{
  		//\u93b6\u5a42\u7d11\u6fee\u5b2a\ufffd\u935c\u5c7c\u8151\u95c2\u6751\ufffd\u93c0\u60e7\u6e6a\u6d93\u5b58\u6902\u9359\u6a40\u567a\u95b2\ufffd
  		QTTable.addQTInfo(new QTInfo(count,"+",pretem,middletemp,temp));
  	}
  	//\u701b\u6a3a\u504d\u7481\uff04\u757b\u7f01\u64b4\u7049\u9428\u52eb\ufffd
  	result=Integer.parseInt(result)+Integer.parseInt(middle)+"";
  	preStr=temp;
  }
  | <MINUS>
   {
  	if(preStr!=null){
  		pretem="T"+(ncount-1);
  	}	
  }
  middleR=Term(){
 	middletemp=middleR.getName();
  	middle=middleR.getValue();
  	count++;
  	temp="T"+ncount;
  	ncount++;
  	if(preStr==null){
  		//\u93b6\u5a42\u7d11\u6fee\u5b2a\ufffd\u935c\u5c7c\u8151\u95c2\u6751\ufffd\u93c0\u60e7\u6e6a\u6d93\u5b58\u6902\u9359\u6a40\u567a\u95b2\ufffd
  		QTTable.addQTInfo(new QTInfo(count,"-",rValue.getName(),middletemp,temp));
  	}else{
  		//\u93b6\u5a42\u7d11\u6fee\u5b2a\ufffd\u935c\u5c7c\u8151\u95c2\u6751\ufffd\u93c0\u60e7\u6e6a\u6d93\u5b58\u6902\u9359\u6a40\u567a\u95b2\ufffd
  		QTTable.addQTInfo(new QTInfo(count,"-",pretem,middletemp,temp));
  	}
  	result=Integer.parseInt(result)-Integer.parseInt(middle)+"";
  	preStr=temp;
  }

  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { 	
  	rValue=new Record(temp,result);
  	return rValue;//\u93c8\ufffd\u6097\u6769\u65bf\u6d16\u741b\u3128\u63ea\u5bee\u5fd5\u6b91\u934a\u714e\u5d46\u9359\ufffd
  	
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u6d94\u6a40\u6ace\u6769\u612e\u757b\u741b\u3128\u63ea\u5bee\u5fe5\u7d19\u7039\u4f79\u7044\u951b\ufffd
Record Term() : //term\u6d93\u8f70\u7bbb\u95c4\u3088\u7e4d\u7ee0\u6943\u6b91\u934a\ufffd
{/*@bgen(jjtree) Term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token node;
  Record rValue=null;//\u701b\u6a3a\u504d\u9353\u5d84\u7af4\u6d93\u7305erm()\u6dc7\u2103\u4f05
  Record MiddleR=null;//\u701b\u6a3a\u504d\u935a\u5e9d\u7af4\u6d93\u7305erm()\u6dc7\u2103\u4f05
  String result;//\u9353\u5d84\u7af4\u6d93\u7305erm()\u9428\u52eb\ufffd
  String middle;//\u935a\u5e9d\u7af4\u6d93\u7305erm()\u9428\u52eb\ufffd
  String middletemp;
  String middleName;
  String temp="";
  String symbol="";//\u6769\u612e\u757b\u7ed7\ufffd
  String preStr=null;
  String pretem=null;
}
{/*@bgen(jjtree) Term */
  try {
/*@egen*/
  rValue=Factor() 
  {
  	temp=rValue.getName();
  	result=rValue.getValue();
  }
  (
    ((node=<MULTIPLY>|node=<DIVIDE>|node=<REMAINDER>)
    {
    	symbol=node.image;
    }
    {
      	if(preStr!=null){
  		pretem="T"+(ncount-1);
      	}
  	}	
    MiddleR= Factor()
      {
      	middletemp=MiddleR.getName();
      	middle=MiddleR.getValue();
    	count++;
  	    temp="T"+ncount;
  	    ncount++;
  	    if(preStr==null){
  		
  			//\u93b6\u5a42\u7d11\u6fee\u5b2a\ufffd\u935c\u5c7c\u8151\u95c2\u6751\ufffd\u93c0\u60e7\u6e6a\u6d93\u5b58\u6902\u9359\u6a40\u567a\u95b2\ufffd
  			QTTable.addQTInfo(new QTInfo(count,symbol,rValue.getName(),middletemp,temp));
  		}else{
  			//\u93b6\u5a42\u7d11\u6fee\u5b2a\ufffd\u935c\u5c7c\u8151\u95c2\u6751\ufffd\u93c0\u60e7\u6e6a\u6d93\u5b58\u6902\u9359\u6a40\u567a\u95b2\ufffd
  			QTTable.addQTInfo(new QTInfo(count,symbol,pretem,middletemp,temp));
  		}
  	    result=Integer.parseInt(result)*Integer.parseInt(middle)+"";
  	    preStr=temp;
      }    
     ) 
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
  	rValue=new Record(temp,result);
  	return rValue;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//\u7eeb\u8bf2\u7037\u7039\u6c2b\u7b9f
String Type():
{/*@bgen(jjtree) Type */
SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token node;
String type;
}
{/*@bgen(jjtree) Type */
        try {
/*@egen*/
	(node=<FLOAT>
	|node=<LONG>
	|node=<INT>
	|node=<SHORT>
	|node=<CHAR>
	|node=<DOUBLE>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  type=node.image;	 
	  return type; 
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}




